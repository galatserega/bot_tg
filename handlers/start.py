from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from config import PRICES, OrderState, ADMIN_ID, IBAN
from keyboards.keyboards import main_menu, payment_options_keyboard
import re
from datetime import datetime

router = Router()

USER_CART = {}

PHONE_REGEX = r"^0\d{9}$"
WORKING_HOURS = (8, 16)


@router.message(F.text == "/start")
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    current_time = datetime.now().hour
    current_day = datetime.now().weekday()
    if current_time < WORKING_HOURS[0] or current_time > WORKING_HOURS[1] or current_day in (5, 6):
        await message.answer("–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –∑ 8 —Ä–∞–Ω–∫—É –¥–æ 16 –≥–æ–¥–∏–Ω–∏.")
        return

    await state.set_state(OrderState.waiting_for_coffee)
    await message.answer(
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n–û–±–µ—Ä—ñ—Ç—å –∫–∞–≤—É –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:\n"
        "–ü—Ä–æ—à—É –∑–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É, —â–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 150 –≥—Ä–Ω. –î—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è.",
        reply_markup=main_menu()
    )
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ—à–∏–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    USER_CART[message.from_user.id] = {"items": {}, "total": 0}


@router.message(OrderState.waiting_for_coffee)
async def select_coffee(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞–≤–∏."""
    user_id = message.from_user.id
    selected_item = message.text.strip()

    # –ü—Ä–∏–≤–æ–¥–∏–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–æ —Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    for item in PRICES.keys():
        if item.strip() == selected_item.split(" - ")[0].strip():
            selected_item = item
            break

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –∫–∞–≤—É –∑ –º–µ–Ω—é
    if selected_item in PRICES:
        price = PRICES[selected_item]

        # –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —É –∫–æ—à–∏–∫—É
        if selected_item in USER_CART[user_id]["items"]:
            USER_CART[user_id]["items"][selected_item]["quantity"] += 1
        else:
            USER_CART[user_id]["items"][selected_item] = {"price": price, "quantity": 1}

        USER_CART[user_id]["total"] += price

        await message.answer(
            f"–î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫: {selected_item} ({USER_CART[user_id]['items'][selected_item]['quantity']} —à—Ç.)"
        )

    elif selected_item == "üõí –ö–æ—à–∏–∫":
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–º—ñ—Å—Ç –∫–æ—à–∏–∫–∞
        cart = USER_CART.get(user_id, {"items": {}, "total": 0})
        if cart["items"]:
            cart_contents = "\n".join(
                [f"{name} - {details['price']}‚Ç¥ x {details['quantity']}"
                 for name, details in cart["items"].items()]
            )
            total = cart["total"]
            await message.answer(
                f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{cart_contents}\n\n–†–∞–∑–æ–º: {total}‚Ç¥"
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
            await state.set_state(OrderState.waiting_for_payment)
            await message.answer(
                "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
                reply_markup=payment_options_keyboard()  # –î–æ–¥–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø–ª–∞—Ç–∏
            )
        else:
            await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

    elif selected_item == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞–≤—É –∑ –º–µ–Ω—é –∞–±–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –∫–æ—à–∏–∫ üõí.")
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —ñ–∑ –º–µ–Ω—é.")


@router.message(OrderState.waiting_for_payment)
async def process_payment(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏."""
    user_id = message.from_user.id
    payment_method = message.text.strip()

    if payment_method == "–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é":
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≥–æ—Ç—ñ–≤–∫–æ—é
        await state.update_data(payment_method="–ì–æ—Ç—ñ–≤–∫–∞")
        await message.answer(
            "–î—è–∫—É—é! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
            reply_markup=ReplyKeyboardRemove()  # –í–∏–¥–∞–ª—è—î–º–æ –º–µ–Ω—é
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        await state.set_state(OrderState.waiting_for_address)
        await message.answer(
            "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: 0–•–•–•–•–•–•–•–•–• –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —É–º–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )

    elif payment_method == "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ IBAN":
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ IBAN —ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
        await state.update_data(payment_method="IBAN")
        iban_number = IBAN  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä IBAN
        await message.answer(
            f"–í–∞—à IBAN –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n`{iban_number}`\n\n"
            "–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–æ–º–µ—Ä IBAN —Ç–∞ –∑–¥—ñ–π—Å–Ω—ñ—Ç—å –æ–ø–ª–∞—Ç—É. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ 0XXXXXXXXX –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderState.waiting_for_address)

    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏.")


@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    user_id = message.from_user.id
    phone = message.text.strip()

    # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0XXXXXXXXX)


    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É
    if not re.match(PHONE_REGEX, phone):
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 0XXXXXXXXX"
        )
        return

    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await message.answer(
        "–î—è–∫—É—é! –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –º–∏ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –í–∞–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        reply_markup=ReplyKeyboardRemove()
    )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—à–∏–∫
    cart = USER_CART[user_id]
    cart_contents = "\n".join(
        [f"{name} - {details['price']} –≥—Ä–Ω x {details['quantity']}"
         for name, details in cart["items"].items()]
    )
    total = cart["total"]

    data = await state.get_data()
    payment_method = data.get("payment_method", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")

    admin_message = (
        f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ @{message.from_user.username} (ID: {user_id}):\n\n"
        f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏: {payment_method}\n\n"
        f"{cart_contents}\n\n–†–∞–∑–æ–º: {total} –≥—Ä–Ω\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É: {phone}"
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await message.bot.send_message(chat_id=ADMIN_ID, text=admin_message)

    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω —Ç–∞ –∫–æ—à–∏–∫
    await state.clear()
    USER_CART.pop(user_id, None)
